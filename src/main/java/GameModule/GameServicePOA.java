package GameModule;


/**
* GameModule/GameServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
<<<<<<< HEAD
* from src/main/java/idl/GameService.idl
* Monday, May 12, 2025 5:24:30 PM SGT
=======
* from GameService.idl
* Tuesday, May 13, 2025 6:18:19 PM SGT
>>>>>>> main
*/

public abstract class GameServicePOA extends org.omg.PortableServer.Servant
 implements GameModule.GameServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("logout", new java.lang.Integer (1));
    _methods.put ("startGame", new java.lang.Integer (2));
    _methods.put ("sendGuess", new java.lang.Integer (3));
    _methods.put ("finishRound", new java.lang.Integer (4));
    _methods.put ("viewLeaderboard", new java.lang.Integer (5));
    _methods.put ("getMaskedWord", new java.lang.Integer (6));
    _methods.put ("createPlayer", new java.lang.Integer (7));
    _methods.put ("deletePlayer", new java.lang.Integer (8));
    _methods.put ("updatePlayerPassword", new java.lang.Integer (9));
    _methods.put ("updateSettings", new java.lang.Integer (10));
    _methods.put ("updatePlayerUsername", new java.lang.Integer (11));
    _methods.put ("updatePlayerWins", new java.lang.Integer (12));
    _methods.put ("viewPlayers", new java.lang.Integer (13));
    _methods.put ("getRoundTime", new java.lang.Integer (14));
    _methods.put ("getWaitingTime", new java.lang.Integer (15));
    _methods.put ("getRemainingTime", new java.lang.Integer (16));
    _methods.put ("getIncorrectGuesses", new java.lang.Integer (17));
    _methods.put ("endGameSession", new java.lang.Integer (18));
    _methods.put ("getCurrentRound", new java.lang.Integer (19));
    _methods.put ("getPlayerWins", new java.lang.Integer (20));
    _methods.put ("startNewRound", new java.lang.Integer (21));
    _methods.put ("isRoundOver", new java.lang.Integer (22));
    _methods.put ("isGameSessionOver", new java.lang.Integer (23));
    _methods.put ("getGameState", new java.lang.Integer (24));
<<<<<<< HEAD
=======
    _methods.put ("addWord", new java.lang.Integer (25));
    _methods.put ("updateWord", new java.lang.Integer (26));
    _methods.put ("deleteWord", new java.lang.Integer (27));
    _methods.put ("getAllWords", new java.lang.Integer (28));
>>>>>>> main
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // GameModule/GameService/login
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           boolean $result = false;
           $result = this.login (username, password);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (GameModule.AlreadyLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           GameModule.AlreadyLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // GameModule/GameService/logout
       {
         String username = in.read_string ();
         this.logout (username);
         out = $rh.createReply();
         break;
       }

       case 2:  // GameModule/GameService/startGame
       {
         String username = in.read_string ();
         String $result = null;
         $result = this.startGame (username);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // GameModule/GameService/sendGuess
       {
         String username = in.read_string ();
         char letter = in.read_char ();
         boolean $result = false;
         $result = this.sendGuess (username, letter);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // GameModule/GameService/finishRound
       {
         String username = in.read_string ();
         int clientRemainingTime = in.read_long ();
         boolean guessedWord = in.read_boolean ();
         this.finishRound (username, clientRemainingTime, guessedWord);
         out = $rh.createReply();
         break;
       }

       case 5:  // GameModule/GameService/viewLeaderboard
       {
         String $result = null;
         $result = this.viewLeaderboard ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // GameModule/GameService/getMaskedWord
       {
         String username = in.read_string ();
         String $result = null;
         $result = this.getMaskedWord (username);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // Admin
       case 7:  // GameModule/GameService/createPlayer
       {
         String username = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.createPlayer (username, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // GameModule/GameService/deletePlayer
       {
         String username = in.read_string ();
         boolean $result = false;
         $result = this.deletePlayer (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 9:  // GameModule/GameService/updatePlayerPassword
       {
         String username = in.read_string ();
         String newPassword = in.read_string ();
         boolean $result = false;
         $result = this.updatePlayerPassword (username, newPassword);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // GameModule/GameService/updateSettings
       {
         int waitingTime = in.read_long ();
         int roundTime = in.read_long ();
         boolean $result = false;
         $result = this.updateSettings (waitingTime, roundTime);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // GameModule/GameService/updatePlayerUsername
       {
         String username = in.read_string ();
         String newUsername = in.read_string ();
         boolean $result = false;
         $result = this.updatePlayerUsername (username, newUsername);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 12:  // GameModule/GameService/updatePlayerWins
       {
         String username = in.read_string ();
         int wins = in.read_long ();
         boolean $result = false;
         $result = this.updatePlayerWins (username, wins);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 13:  // GameModule/GameService/viewPlayers
       {
         String $result = null;
         $result = this.viewPlayers ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  //server
       case 14:  // GameModule/GameService/getRoundTime
       {
         int $result = (int)0;
         $result = this.getRoundTime ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 15:  // GameModule/GameService/getWaitingTime
       {
         int $result = (int)0;
         $result = this.getWaitingTime ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 16:  // GameModule/GameService/getRemainingTime
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getRemainingTime (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 17:  // GameModule/GameService/getIncorrectGuesses
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getIncorrectGuesses (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 18:  // GameModule/GameService/endGameSession
       {
         String username = in.read_string ();
         this.endGameSession (username);
         out = $rh.createReply();
         break;
       }

       case 19:  // GameModule/GameService/getCurrentRound
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getCurrentRound (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 20:  // GameModule/GameService/getPlayerWins
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getPlayerWins (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 21:  // GameModule/GameService/startNewRound
       {
         String username = in.read_string ();
         boolean $result = false;
         $result = this.startNewRound (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 22:  // GameModule/GameService/isRoundOver
       {
         String username = in.read_string ();
         boolean $result = false;
         $result = this.isRoundOver (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 23:  // GameModule/GameService/isGameSessionOver
       {
         String username = in.read_string ();
         boolean $result = false;
         $result = this.isGameSessionOver (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 24:  // GameModule/GameService/getGameState
       {
         String username = in.read_string ();
         GameModule.GameStateDTO $result = null;
         $result = this.getGameState (username);
         out = $rh.createReply();
         GameModule.GameStateDTOHelper.write (out, $result);
         break;
       }

<<<<<<< HEAD
=======

  // Admin word management
       case 25:  // GameModule/GameService/addWord
       {
         String word = in.read_string ();
         boolean $result = false;
         $result = this.addWord (word);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 26:  // GameModule/GameService/updateWord
       {
         String oldWord = in.read_string ();
         String newWord = in.read_string ();
         boolean $result = false;
         $result = this.updateWord (oldWord, newWord);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 27:  // GameModule/GameService/deleteWord
       {
         String word = in.read_string ();
         boolean $result = false;
         $result = this.deleteWord (word);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 28:  // GameModule/GameService/getAllWords
       {
         String $result[] = null;
         $result = this.getAllWords ();
         out = $rh.createReply();
         GameModule.StringSeqHelper.write (out, $result);
         break;
       }

>>>>>>> main
       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:GameModule/GameService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameService _this() 
  {
    return GameServiceHelper.narrow(
    super._this_object());
  }

  public GameService _this(org.omg.CORBA.ORB orb) 
  {
    return GameServiceHelper.narrow(
    super._this_object(orb));
  }


} // class GameServicePOA
